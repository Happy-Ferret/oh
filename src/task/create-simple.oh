#!/usr/bin/env oh

define common: import: ... bin/common.oh
define t: quote: (DefineSyntax builtin "t.Closure(NewBuiltin)") \
                 (DefineSyntax define "t.LexicalVar(psExecDefine)") \
                 (DefineSyntax dynamic "t.DynamicVar(psExecDynamic)") \
                 (DefineSyntax method "t.Closure(NewMethod)") \
                 (DefineSyntax setenv "t.DynamicVar(psExecSetenv)") \
                 (DefineSyntax syntax "t.Closure(NewSyntax)") \
                 (PublicSyntax public "t.LexicalVar(psExecPublic)") \
                 (DefineMethod car "t.Return(Caar(args))") \
                 (DefineMethod cdr "t.Return(Cdar(args))") \
                 (DefineMethod cons "t.Return(Cons(Car(args), Cadr(args)))") \
                 (DefineMethod list "t.Return(args)") \
                 (DefineMethod reverse "t.Return(Reverse(Car(args)))")

dynamic $stdout: open w: "/"::join $origin simple.go

common::introduction @`(basename $0) $GOPACKAGE

echo 'import . "github.com/michaelmacinnis/oh/src/cell"'
echo
echo "func bind_simple(s *Scope) {"

for t: method (l) as {
	define d: car l
	define n: cadr l
	define o: caddr l

	echo: interpolate "
	s.${d}(\"${n}\", func(t *Task, args Cell) bool {
		return ${o}
	})"
}

echo "}"

