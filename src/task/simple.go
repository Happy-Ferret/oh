// Released under an MIT-style license. See LICENSE.

// Generated by create-simple.oh

package task

import . "github.com/michaelmacinnis/oh/src/cell"

func bind_simple(s *Scope) {

	s.DefineSyntax("builtin", func(t *Task, args Cell) bool {
		return t.Closure(NewBuiltin)
	})

	s.DefineSyntax("define", func(t *Task, args Cell) bool {
		return t.LexicalVar(psExecDefine)
	})

	s.DefineSyntax("dynamic", func(t *Task, args Cell) bool {
		return t.DynamicVar(psExecDynamic)
	})

	s.DefineSyntax("method", func(t *Task, args Cell) bool {
		return t.Closure(NewMethod)
	})

	s.DefineSyntax("setenv", func(t *Task, args Cell) bool {
		return t.DynamicVar(psExecSetenv)
	})

	s.DefineSyntax("syntax", func(t *Task, args Cell) bool {
		return t.Closure(NewSyntax)
	})

	s.PublicSyntax("public", func(t *Task, args Cell) bool {
		return t.LexicalVar(psExecPublic)
	})

	s.DefineMethod("car", func(t *Task, args Cell) bool {
		return t.Return(Caar(args))
	})

	s.DefineMethod("cdr", func(t *Task, args Cell) bool {
		return t.Return(Cdar(args))
	})

	s.DefineMethod("cons", func(t *Task, args Cell) bool {
		return t.Return(Cons(Car(args), Cadr(args)))
	})

	s.DefineMethod("list", func(t *Task, args Cell) bool {
		return t.Return(args)
	})

	s.DefineMethod("reverse", func(t *Task, args Cell) bool {
		return t.Return(Reverse(Car(args)))
	})
}
