#!/usr/bin/env oh

define common: import: ... bin/common.oh
define t: quote: \
	(eq "!prev.Equal(curr)" "") \
	(ge "prev.Less(curr)" ".(Number)") \
	(gt "!prev.Greater(curr)" ".(Number)") \
	(is "prev != curr" "") \
	(le "prev.Greater(curr)" ".(Number)") \
	(lt "!prev.Less(curr)" ".(Number)")

dynamic $stdout: open w: "/"::join $origin relational.go

common::introduction @`(basename $0) $GOPACKAGE

echo 'import . "github.com/michaelmacinnis/oh/src/cell"'
echo
echo "func bind_relational(s *Scope) {"

for t: method (l) as {
	define n: car l
	define o: cadr l
	define t: caddr l

	echo: interpolate "
	s.DefineMethod(\"${n}\", func(t *Task, args Cell) bool {
		prev := Car(args)${t}

		for Cdr(args) != Null {
			args = Cdr(args)
			curr := Car(args)${t}

			if ${o} {
				return t.Return(False)
			}

			prev = curr
		}

		return t.Return(True)
	})"
}

echo "}"

