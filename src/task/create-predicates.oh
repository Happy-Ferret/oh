#!/usr/bin/env oh

define common: import: ... bin/common.oh
define t: quote: (is-atom IsAtom) (is-boolean IsBoolean) \
                 (is-builtin IsBuiltin) (is-channel IsChannel) \
                 (is-cons IsCons) (is-float IsFloat) (is-integer IsInteger) \
                 (is-method IsMethod) (is-null IsNull) (is-number IsNumber) \
                 (is-object IsContext) (is-pipe IsPipe) \
                 (is-rational IsRational) (is-status IsStatus) \
                 (is-string IsString) (is-symbol IsSymbol) (is-syntax IsSyntax)

dynamic $stdout: open w: "/"::join $origin predicates.go

common::introduction @`(basename $0) $GOPACKAGE

echo 'import . "github.com/michaelmacinnis/oh/src/cell"'
echo
echo "func bind_predicates(s *Scope) {"

for t: method (l) as {
	define n: car l
	define m: cadr l
	echo: interpolate "
	s.DefineMethod(\"${n}\", func(t *Task, args Cell) bool {
		return t.Return(NewBoolean(${m}(Car(args))))
	})"
}

echo "}"

