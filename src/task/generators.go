// Released under an MIT-style license. See LICENSE.

// Generated by create-generators.oh

package task

import . "github.com/michaelmacinnis/oh/src/cell"

func bind_generators(s *Scope) {

	s.DefineMethod("boolean", func(t *Task, args Cell) bool {
		return t.Return(NewBoolean(Car(args).Bool()))
	})

	s.DefineMethod("float", func(t *Task, args Cell) bool {
		return t.Return(NewFloat(Car(args).(Atom).Float()))
	})

	s.DefineMethod("integer", func(t *Task, args Cell) bool {
		return t.Return(NewInteger(Car(args).(Atom).Int()))
	})

	s.DefineMethod("pipe", func(t *Task, args Cell) bool {
		return t.Return(NewPipe(t.Lexical, nil, nil))
	})

	s.DefineMethod("rational", func(t *Task, args Cell) bool {
		return t.Return(NewRational(Car(args).(Atom).Rat()))
	})

	s.DefineMethod("status", func(t *Task, args Cell) bool {
		return t.Return(NewStatus(Car(args).(Atom).Status()))
	})

	s.DefineMethod("string", func(t *Task, args Cell) bool {
		return t.Return(NewString(t, Car(args).String()))
	})

	s.DefineMethod("symbol", func(t *Task, args Cell) bool {
		return t.Return(NewSymbol(raw(Car(args))))
	})
}
