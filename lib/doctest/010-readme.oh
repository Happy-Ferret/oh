#!/usr/bin/env oh

# KEYWORD: readme
# PROVIDE: header

## # A surprisingly powerful Unix shell
##
## Oh is a Unix shell. If you've used other Unix shells, oh should feel
## familiar.
##
## ![gif](img/oh.gif)
##
## Where oh diverges from traditional Unix shells is in its programming
## language features.
##
## At its core, oh is a heavily modified dialect of the Scheme programming
## language, complete with first-class continuations and proper tail
## recursion. Like early Scheme implementations, oh exposes environments
## as first-class values. Oh extends environments to allow both public and
## private members and uses these extended first-class environments as the
## basis for its prototype-based object system.
##
## Written in Go, oh is also a concurrent programming language. It exposes
## channels, in addition to pipes, as first-class values. As oh uses the
## same syntax for code and data, channels and pipes can, in many cases, be
## used interchangeably. This homoiconic nature also allows oh to support
## fexprs which, in turn, allow oh to be easily extended.

echo "Hello, World!"
cal 01 2030 | sed -re 's/[ ]+$//g' # Strip trailing spaces.
date >greeting
echo "Hello, World!" >>greeting
wc <greeting
cat greeting | wc	# Useless use of cat.
tail -n1 greeting; cal 01 2030 | sed -re 's/[ ]+$//g' # Strip trailing spaces.
grep impossible *[a-z]ing &
wait
mkdir junk && cd junk
cd ..
rm -r greeting junk || echo "rm failed!"

#-     Hello, World!
#-         January 2030
#-     Su Mo Tu We Th Fr Sa
#-            1  2  3  4  5
#-      6  7  8  9 10 11 12
#-     13 14 15 16 17 18 19
#-     20 21 22 23 24 25 26
#-     27 28 29 30 31
#-     
#-      2  8 43
#-           2       8      43
#-     Hello, World!
#-         January 2030
#-     Su Mo Tu We Th Fr Sa
#-            1  2  3  4  5
#-      6  7  8  9 10 11 12
#-     13 14 15 16 17 18 19
#-     20 21 22 23 24 25 26
#-     27 28 29 30 31
#-     

