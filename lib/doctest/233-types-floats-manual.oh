#!/usr/bin/env oh

# KEYWORD: manual
# PROVIDE: floats
# REQUIRE: integers

## #### Floats
##
## Just like integers in oh, things that look like floats are still symbols
## by default. To explicitly create a float, the `float` command can be used
## with an argument that will parse correctly as an float.
##
## The command,
##
#{
write: float "3.14"
#}
##
## produces the output,
##
#+     3.14
##
## Again, like integers, oh will try to help by converting symbols that will
## parse correctly as a float when used in a context where that would be
## appropriate. For example,
##
#{
write: float: add 3.14 2.72 1.41 2.50 4.67
#}
##
## produces the output,
##
#+     14.44
##

define common: import: ... lib/common.oh

define x: float -1
for common::predicates: method (names) as {
    define name: car names
    define predicate: eval name
    write name: "x => %v"::sprintf: predicate x
}

#-     is-atom "x => true"
#-     is-boolean "x => false"
#-     is-builtin "x => false"
#-     is-channel "x => false"
#-     is-cons "x => false"
#-     is-continuation "x => false"
#-     is-float "x => true"
#-     is-integer "x => false"
#-     is-method "x => false"
#-     is-null "x => false"
#-     is-number "x => true"
#-     is-object "x => false"
#-     is-pipe "x => false"
#-     is-rational "x => false"
#-     is-status "x => false"
#-     is-string "x => false"
#-     is-symbol "x => false"
#-     is-syntax "x => false"

