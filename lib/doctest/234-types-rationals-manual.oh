#!/usr/bin/env oh

# KEYWORD: manual
# PROVIDE: rationals
# REQUIRE: floats

## #### Rationals
##
## Without the `float` command in the previous example the command,
##
#{
write: add 3.14 2.72 1.41 2.50 4.67
#}
##
## produces the output,
##
#+     361/25
##
## All arithmetic operations in oh are performed by first converting all
## operands to rational numbers. The result is a rational number which can
## be explicitly converted with the `float`, `integer` or `status` commands.
##
## A rational number can be explicitly declared with the `rational` command,
##
#{
define r: rational 100/3
write: is-rational r
write: float r
write: integer r
write: status r
#}
##

#-     true
#-     33.333333333333336
#-     33
#-     33

define common: import: ... lib/common.oh

define x: rational -1
for common::predicates: method (names) as {
    define name: car names
    define predicate: eval name
    write name: "x => %v"::sprintf: predicate x
}

#-     is-atom "x => true"
#-     is-boolean "x => false"
#-     is-builtin "x => false"
#-     is-channel "x => false"
#-     is-cons "x => false"
#-     is-continuation "x => false"
#-     is-float "x => false"
#-     is-integer "x => false"
#-     is-method "x => false"
#-     is-null "x => false"
#-     is-number "x => true"
#-     is-object "x => false"
#-     is-pipe "x => false"
#-     is-rational "x => true"
#-     is-status "x => false"
#-     is-string "x => false"
#-     is-symbol "x => false"
#-     is-syntax "x => false"

