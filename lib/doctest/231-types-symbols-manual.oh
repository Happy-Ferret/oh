#!/usr/bin/env oh

# KEYWORD: manual
# PROVIDE: symbols
# REQUIRE: types

## #### Symbols
##
## Oh's default data type is the symbol. A symbol is one or more alphanumeric
## or `!`, `$`, `*`, `+`, `,`, `-`, `/`, `=`, `?`, `[`, `]`, or  `_` 
## characters. Unless a symbol has been used as a variable name, it evaluates
## to itself.
##
## The command,
##
#{
write this-is-a-symbol
#}
##
## produces the output,
##
#+     this-is-a-symbol
##

write !: is-symbol !
write $: is-symbol $
write *: is-symbol *
write +: is-symbol +
write ,: is-symbol ,
write -: is-symbol -
write /: is-symbol /
write =: is-symbol =
write ?: is-symbol ?
write [: is-symbol [
write ]: is-symbol ]
write _: is-symbol _

#-     ! true
#-     $ true
#-     * true
#-     + true
#-     , true
#-     - true
#-     / true
#-     = true
#-     ? true
#-     [ true
#-     ] true
#-     _ true

define common: import: ... lib/common.oh

define x this-is-a-symbol
for common::predicates: method (names) as {
    define name: car names
    define predicate: eval name
    write name: "x => %v"::sprintf: predicate x
}

#-     is-atom "x => true"
#-     is-boolean "x => false"
#-     is-builtin "x => false"
#-     is-channel "x => false"
#-     is-cons "x => false"
#-     is-continuation "x => false"
#-     is-float "x => false"
#-     is-integer "x => false"
#-     is-method "x => false"
#-     is-null "x => false"
#-     is-number "x => false"
#-     is-object "x => false"
#-     is-pipe "x => false"
#-     is-rational "x => false"
#-     is-status "x => false"
#-     is-string "x => false"
#-     is-symbol "x => true"
#-     is-syntax "x => false"

