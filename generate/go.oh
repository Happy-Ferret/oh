#!/usr/bin/env oh

define t: quote: (is-atom IsAtom) (is-boolean IsBoolean) \
                 (is-builtin IsBuiltin) (is-channel IsChannel) \
                 (is-cons IsCons) (is-float IsFloat) (is-integer IsInteger) \
                 (is-method IsMethod) (is-null IsNull) (is-number IsNumber) \
                 (is-object IsContext) (is-pipe IsPipe) \
                 (is-rational IsRational) (is-status IsStatus) \
                 (is-string IsString) (is-symbol IsSymbol) (is-syntax IsSyntax)

define introduction: method (name) as {
	echo "// Released under an MIT-style license. See LICENSE."
	echo
	echo "// Generated by" name
	echo
	echo "package main"
	echo
}

dynamic $stdout: open "w": "/"::join $origin ".." predicates.go

introduction @`(basename $0)

echo "func bind_predicates(s *Scope) {"
for t: method (l) as {
	define n: car l
	define m: cadr l
	printf "\ts.DefineMethod(\"%s\", func(t *Task, args Cell) bool {" n
	printf "\t\treturn t.Return(NewBoolean(%s(Car(args))))" m
	printf "\t})"
}
echo "}"

