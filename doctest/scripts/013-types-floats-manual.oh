#!/usr/bin/env oh

# KEYWORD: manual
# PROVIDE: floats
# REQUIRE: integers

## ## Floats
##
## Just like integers in oh, things that look like floats are still symbols
## by default. To create a float, the `float` command can be used with an
## argument that will parse correctly as an float.
##
## The command,
##
#{
write: float "3.14"
#}
##
## produces the output,
##
#+     3.14
##
## Again, like integers, oh will try to help by converting symbols that will
## parse correctly as a float when used in a context where that would be
## appropriate. For example,
##
#{
write: add 1.2 2.3 3.4
#}
##
## produces the output,
##
#+     6.9
##

define x: float -1
define predicates '(is-atom is-boolean is-builtin is-channel is-cons is-float is-integer is-method is-null is-number is-object is-pipe is-status is-string is-symbol is-syntax)
for predicates: method (name) as {
    define predicate: eval name
    write name: "x => %v"::sprintf: predicate x
}

#-     is-atom "x => true"
#-     is-boolean "x => false"
#-     is-builtin "x => false"
#-     is-channel "x => false"
#-     is-cons "x => false"
#-     is-float "x => true"
#-     is-integer "x => false"
#-     is-method "x => false"
#-     is-null "x => false"
#-     is-number "x => true"
#-     is-object "x => false"
#-     is-pipe "x => false"
#-     is-status "x => false"
#-     is-string "x => false"
#-     is-symbol "x => false"
#-     is-syntax "x => false"

