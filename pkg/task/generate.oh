#!/usr/bin/env oh

define common: import: ... lib/common.oh

public $stdout: open w: "/"::join _origin_ generated.go

common::introduction @`(basename $0) $GOPACKAGE

echo "import (
	. \"github.com/michaelmacinnis/oh/pkg/cell\"
	\"strings\"
	\"unicode\"
)"

define t: quote: (add Add) (sub Subtract) (div Divide) \
                 (mod Modulo) (mul Multiply)

echo "\nfunc bindArithmetic(s *Scope) {"
for t: method (l) = {
	define n: car l
	define m: cadr l
	echo: interpolate "
	s.DefineMethod(\"${n}\", func(t *Task, args Cell) bool {
		acc := Car(args).(Number)

		for Cdr(args) != Null {
			args = Cdr(args)
			acc = acc.${m}(Car(args))
		}

		return t.Return(acc)
	})"
}
echo "}"

define t: quote: (boolean "NewBoolean(Car(args).Bool())") \
                 (float "NewFloat(Car(args).(Atom).Float())") \
                 (integer "NewInteger(Car(args).(Atom).Int())") \
                 (pipe "NewPipe(t.Lexical, nil, nil)") \
                 (rational "NewRational(Car(args).(Atom).Rat())") \
                 (status "NewStatus(Car(args).(Atom).Status())") \
                 (string "NewString(t, Car(args).String())") \
                 (symbol "NewSymbol(raw(Car(args)))")

echo "\nfunc bindGenerators(s *Scope) {"
for t: method (l) = {
	define n: car l
	define o: cadr l
	echo: interpolate "
	s.DefineMethod(\"${n}\", func(t *Task, args Cell) bool {
		return t.Return(${o})
	})"
}
echo "}"

echo "\nfunc bindPredicates(s *Scope) {"
for common::predicates: method (l) = {
	define n: car l
	define m: cadr l
	echo: interpolate "
	s.DefineMethod(\"${n}\", func(t *Task, args Cell) bool {
		return t.Return(NewBoolean(${m}(Car(args))))
	})"
}
echo "}"

define t: quote: \
        (eq "!prev.Equal(curr)" "") \
        (ge "prev.Less(curr)" ".(Number)") \
        (gt "!prev.Greater(curr)" ".(Number)") \
        (is "prev != curr" "") \
        (le "prev.Greater(curr)" ".(Number)") \
        (lt "!prev.Less(curr)" ".(Number)")

echo "\nfunc bindRelational(s *Scope) {"
for t: method (l) = {
	define n: car l
	define o: cadr l
	define t: caddr l
	echo: interpolate "
	s.DefineMethod(\"${n}\", func(t *Task, args Cell) bool {
		prev := Car(args)${t}

		for Cdr(args) != Null {
			args = Cdr(args)
			curr := Car(args)${t}

			if ${o} {
				return t.Return(False)
			}

			prev = curr
		}

		return t.Return(True)
	})"
}
echo "}"

define t: quote: (DefineSyntax builtin "t.Closure(NewBuiltin)") \
                 (DefineSyntax define "t.LexicalVar(psExecDefine)") \
                 (DefineSyntax method "t.Closure(NewMethod)") \
                 (DefineSyntax setenv "t.LexicalVar(psExecSetenv)") \
                 (DefineSyntax syntax "t.Closure(NewSyntax)") \
                 (DefineMethod car "t.Return(Caar(args))") \
                 (DefineMethod cdr "t.Return(Cdar(args))") \
                 (DefineMethod cons "t.Return(Cons(Car(args), Cadr(args)))") \
                 (DefineMethod list "t.Return(args)") \
                 (DefineMethod not "t.Return(NewBoolean(!Car(args).Bool()))") \
                 (DefineMethod reverse "t.Return(Reverse(Car(args)))")

echo "\nfunc bindTheRest(s *Scope) {"
for t: method (l) = {
	define d: car l
	define n: cadr l
	define o: caddr l
	echo: interpolate "
	s.${d}(\"${n}\", func(t *Task, args Cell) bool {
		return ${o}
	})"
}
echo "}"

echo "\nfunc bindStringPredicates(e *Env) {"

define t: quote: (is-control IsControl) (is-digit IsDigit) \
                 (is-graphic IsGraphic) (is-letter IsLetter) \
                 (is-lower IsLower) (is-mark IsMark) (is-print IsPrint) \
                 (is-punct IsPunct) (is-space IsSpace) (is-symbol IsSymbol) \
                 (is-title IsTitle) (is-upper IsUpper)

for t: method (l) = {
	define n: car l
	define m: cadr l
	echo: interpolate "
	e.Method(\"${n}\", func(t *Task, args Cell) bool {
		s := raw(toString(Car(t.Dump).(Binding).Self()))

		for _, c := range s {
			if !unicode.${m}(c) {
				return t.Return(False)
			}
		}

		return t.Return(True)
	})"
}

define t: quote: (to-lower ToLower) (to-title ToTitle) (to-upper ToUpper)

for t: method (l) = {
	define n: car l
	define m: cadr l
	echo: interpolate "
	e.Method(\"${n}\", func(t *Task, args Cell) bool {
		s := raw(toString(Car(t.Dump).(Binding).Self()))

		return t.Return(NewString(t, strings.${m}(s)))
	})"
}

echo "}"

